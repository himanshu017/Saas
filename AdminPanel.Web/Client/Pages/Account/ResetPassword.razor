@page "/ResetPassword/{Token}"
@inject CustomAuthenticationStateProvider _auth


<div class="user-form-card p-3 py-3">
    <div class="user-form-title"><h2>Reset Password</h2></div>
    <div class="user-form-group d-block">
        @if (resetForm)
        {
            <EditForm autocomplete="off" Model="@model" OnValidSubmit="@PasswordReset">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="mb-2 text-muted">Password</label>
                    <RadzenPassword @bind-Value="@model.Password" class="form-control" />
                    <ValidationMessage For="() => model.Password" />
                </div>
                <div class="mb-3">
                    <label class="mb-2 text-muted">Confirm Password</label>
                    <RadzenPassword @bind-Value="@model.ConfirmPassword" class="form-control" />
                    <ValidationMessage For="() => model.ConfirmPassword" />
                </div>
                <div class="form-button">
                    <button type="submit">Reset Password</button>
                </div>

            </EditForm>
        }
        else
        {
            @if (response.IsSuccess)
            {
                <p><a href="/Login"> Click here </a> to login using your new password.</p>
            }
            else if (!response.IsRecent)
            {
                <p><a href="/ForgotPassword"> Click here </a> to generate a new reset token.</p>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public string Token { get; set; }

    ResetPasswordBO model = new();
    bool resetForm = true;
    ResetPasswordResponse response = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task PasswordReset()
    {
        model.ResetToken = Token;

        loading.Start();

        response = await _auth.ResetPassword(model);
        resetForm = false;

        if (response.IsRecent)
        {
            resetForm = true;
            model = new();
        }

        loading.Stop();
    }
}
