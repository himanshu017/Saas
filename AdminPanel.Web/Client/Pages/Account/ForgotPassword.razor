@page "/forgotpassword"
@inject CustomAuthenticationStateProvider _auth
@inject NavigationManager _nav

<AlertMessage Model="alert" />
<div class="user-form-card">
    <p>
        @message
    </p>
    @if (showForm)
    {
        <div class="user-form-title">
            <h2>worried?</h2>
            <p>No Problem! Just Follow The Simple Way</p>
        </div>
        <EditForm Model="model" class="user-form" OnValidSubmit="SubmitForgotPassword">
            <DataAnnotationsValidator />
            <div class="form-group">
                <RadzenTextBox class="form-control" Placeholder="Enter yout email" @bind-Value="model.Email" />
                <ValidationMessage For="() => model.Email" />
            </div>
            <div class="form-button">
                <button type="submit">get reset link</button>
            </div>
        </EditForm>
    }
</div>
<div class="user-form-remind">
    <p>Go Back To<a href="login">login here</a></p>
</div>

@code {
    AlertBO alert = new() { Visible = false, Type = "danger" };
    ForgotPasswordModel model = new();

    bool showForm = true;
    string message = "";
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task SubmitForgotPassword()
    {
        try
        {
            loading.Start();
            model.CompanyId = _state.CompanyId;
            model.Domain = _state.DomainName;
            model.UserTypeId = (byte)UserTypes.AppUser;
            var res = await _auth.ForgotPassword(model);

            if (res.IsSuccess)
            {
                showForm = false;
                message = res.Message;
                alert.Visible = false;
            }
            else
            {
                alert.Visible = true;
                alert.Message = res.Message;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            alert.Visible = true;
            alert.Message = ex.Message;
        }
        finally
        {
            loading.Stop();
        }
    }
}
