@inject IJSRuntime jsRuntime

@if (showModal)
{
    <div class="modal fade show" tabindex="-1" role="dialog" style="display:block; overflow-y: auto;;z-index:1100">
        <div class="modal-dialog @Size bg-white" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @Body
                </div>
                <div class="modal-footer">
                    @Footer
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show" style="z-index:1099"></div>
}

@code {
    [Parameter] public RenderFragment? Body { get; set; }

    [Parameter] public RenderFragment? Footer { get; set; }

    [Parameter] public string Title { get; set; } = string.Empty;

    [Parameter] public string Size { get; set; } = "";


    bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public async void Open()
    {
        showModal = true;
        await jsRuntime.InvokeVoidAsync("setBodyModalClass");
        StateHasChanged();
    }

    public async void Close()
    {
        showModal = false; 
        await jsRuntime.InvokeVoidAsync("setBodyModalClass");
        StateHasChanged();
    }
}
