// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using AdminPanel.DataModel.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace AdminPanel.DataModel.Context
{
    public partial class OrderflowContext
    {
        private IOrderflowContextProcedures _procedures;

        public virtual IOrderflowContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new OrderflowContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IOrderflowContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<InsertSeedDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_SyncAPIProductsResult>().HasNoKey().ToView(null);
        }
    }

    public partial class OrderflowContextProcedures : IOrderflowContextProcedures
    {
        private readonly OrderflowContext _context;

        public OrderflowContextProcedures(OrderflowContext context)
        {
            _context = context;
        }

        public virtual async Task<List<InsertSeedDataResult>> InsertSeedDataAsync(long? companyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "companyId",
                    Value = companyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertSeedDataResult>("EXEC @returnValue = [dbo].[InsertSeedData] @companyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_SyncAPICustomersAsync(long? companyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "companyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_SyncAPICustomers] @companyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_SyncAPIProductsResult>> sp_SyncAPIProductsAsync(long? companyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "companyID",
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_SyncAPIProductsResult>("EXEC @returnValue = [dbo].[sp_SyncAPIProducts] @companyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
