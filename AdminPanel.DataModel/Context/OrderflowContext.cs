// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using AdminPanel.DataModel.Models;
using Microsoft.EntityFrameworkCore;

namespace AdminPanel.DataModel.Context;

public partial class OrderflowContext : DbContext
{
    public OrderflowContext(DbContextOptions<OrderflowContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AddressType> AddressTypes { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<CommentType> CommentTypes { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<CompanyConfigurationSetting> CompanyConfigurationSettings { get; set; }

    public virtual DbSet<CompanyDataImportMapping> CompanyDataImportMappings { get; set; }

    public virtual DbSet<CompanyInformationalText> CompanyInformationalTexts { get; set; }

    public virtual DbSet<CompanyPackageDetail> CompanyPackageDetails { get; set; }

    public virtual DbSet<CompanyPostedLink> CompanyPostedLinks { get; set; }

    public virtual DbSet<CompanySlider> CompanySliders { get; set; }

    public virtual DbSet<CompanySpecial> CompanySpecials { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerImport> CustomerImports { get; set; }

    public virtual DbSet<CustomerUserFeaturesMaster> CustomerUserFeaturesMasters { get; set; }

    public virtual DbSet<DeliveryCutoffType> DeliveryCutoffTypes { get; set; }

    public virtual DbSet<DeliveryDateCutoff> DeliveryDateCutoffs { get; set; }

    public virtual DbSet<DeliveryRun> DeliveryRuns { get; set; }

    public virtual DbSet<Discount> Discounts { get; set; }

    public virtual DbSet<DiscountLimitationType> DiscountLimitationTypes { get; set; }

    public virtual DbSet<DiscountType> DiscountTypes { get; set; }

    public virtual DbSet<FavoriteList> FavoriteLists { get; set; }

    public virtual DbSet<FavoriteListItem> FavoriteListItems { get; set; }

    public virtual DbSet<FavoriteListType> FavoriteListTypes { get; set; }

    public virtual DbSet<FeatureDescription> FeatureDescriptions { get; set; }

    public virtual DbSet<Filter> Filters { get; set; }

    public virtual DbSet<GlobalTimeZone> GlobalTimeZones { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<GroupDetail> GroupDetails { get; set; }

    public virtual DbSet<GroupScope> GroupScopes { get; set; }

    public virtual DbSet<GroupType> GroupTypes { get; set; }

    public virtual DbSet<ImportLog> ImportLogs { get; set; }

    public virtual DbSet<MainCategory> MainCategories { get; set; }

    public virtual DbSet<MarketingType> MarketingTypes { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MessageRecipient> MessageRecipients { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<PackageFeature> PackageFeatures { get; set; }

    public virtual DbSet<PackageInterval> PackageIntervals { get; set; }

    public virtual DbSet<PaymentProcessor> PaymentProcessors { get; set; }

    public virtual DbSet<PaymentTransaction> PaymentTransactions { get; set; }

    public virtual DbSet<PredefinedProductAttributeValue> PredefinedProductAttributeValues { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductAttribute> ProductAttributes { get; set; }

    public virtual DbSet<ProductAttributeMapping> ProductAttributeMappings { get; set; }

    public virtual DbSet<ProductAttributeValue> ProductAttributeValues { get; set; }

    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<ProductImport> ProductImports { get; set; }

    public virtual DbSet<ProductInventory> ProductInventories { get; set; }

    public virtual DbSet<ProductUnit> ProductUnits { get; set; }

    public virtual DbSet<SpecialPriceImport> SpecialPriceImports { get; set; }

    public virtual DbSet<SpecialPricing> SpecialPricings { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<StatusType> StatusTypes { get; set; }

    public virtual DbSet<SubCategory> SubCategories { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<TagType> TagTypes { get; set; }

    public virtual DbSet<TargetMarketing> TargetMarketings { get; set; }

    public virtual DbSet<TempCart> TempCarts { get; set; }

    public virtual DbSet<TempCartItem> TempCartItems { get; set; }

    public virtual DbSet<UnitOfMeasurement> UnitOfMeasurements { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserDeviceLocationAndToken> UserDeviceLocationAndTokens { get; set; }

    public virtual DbSet<UserPassword> UserPasswords { get; set; }

    public virtual DbSet<UserSalesrepCode> UserSalesrepCodes { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Address>(entity =>
        {
            entity.ToTable("Address");

            entity.Property(e => e.Address1)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Address2).HasMaxLength(100);
            entity.Property(e => e.CityName).HasMaxLength(100);
            entity.Property(e => e.ContactPerson)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CountryName).HasMaxLength(100);
            entity.Property(e => e.County).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("date");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("date");
            entity.Property(e => e.PhoneNumber).HasMaxLength(15);
            entity.Property(e => e.PostalCode).HasMaxLength(10);
            entity.Property(e => e.StateName).HasMaxLength(100);

            entity.HasOne(d => d.AddressType).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.AddressTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Address_AddressType");

            entity.HasOne(d => d.City).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.CityId)
                .HasConstraintName("FK_Address_Cities");

            entity.HasOne(d => d.Country).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Address_Countries");

            entity.HasOne(d => d.State).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Address_States");
        });

        modelBuilder.Entity<AddressType>(entity =>
        {
            entity.ToTable("AddressType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cities__3214EC0731CAC2F4");

            entity.Property(e => e.City1)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("City");
            entity.Property(e => e.County)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.State).WithMany(p => p.Cities)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cities_States");
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.Property(e => e.CommentDescription).HasMaxLength(500);

            entity.HasOne(d => d.Customer).WithMany(p => p.Comments)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Comments_Customer");

            entity.HasOne(d => d.Type).WithMany(p => p.Comments)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_CommentType");
        });

        modelBuilder.Entity<CommentType>(entity =>
        {
            entity.ToTable("CommentType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.ToTable("Company");

            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrencyInfo).HasMaxLength(50);
            entity.Property(e => e.DomainName).HasMaxLength(50);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Logo).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone).HasMaxLength(15);
            entity.Property(e => e.Phone2).HasMaxLength(15);
            entity.Property(e => e.PrimaryColor).HasMaxLength(10);
            entity.Property(e => e.SecondaryColor).HasMaxLength(10);

            entity.HasOne(d => d.TimeZone).WithMany(p => p.Companies)
                .HasForeignKey(d => d.TimeZoneId)
                .HasConstraintName("FK_Company_GlobalTimeZones");

            entity.HasMany(d => d.Addresses).WithMany(p => p.Companies)
                .UsingEntity<Dictionary<string, object>>(
                    "CompanyAddress",
                    r => r.HasOne<Address>().WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompanyAddress_Address"),
                    l => l.HasOne<Company>().WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompanyAddress_Company"),
                    j =>
                    {
                        j.HasKey("CompanyId", "AddressId");
                        j.ToTable("CompanyAddress");
                    });
        });

        modelBuilder.Entity<CompanyConfigurationSetting>(entity =>
        {
            entity.HasKey(e => e.CompanyId);

            entity.Property(e => e.CompanyId).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithOne(p => p.CompanyConfigurationSetting)
                .HasForeignKey<CompanyConfigurationSetting>(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyConfigurationSettings_Company");
        });

        modelBuilder.Entity<CompanyDataImportMapping>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ImportType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MappingName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.CompanyDataImportMappings)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyDataImportMappings_Company");
        });

        modelBuilder.Entity<CompanyInformationalText>(entity =>
        {
            entity.HasKey(e => e.CompanyId);

            entity.Property(e => e.CompanyId).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithOne(p => p.CompanyInformationalText)
                .HasForeignKey<CompanyInformationalText>(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyInformationalTexts_Company");
        });

        modelBuilder.Entity<CompanyPackageDetail>(entity =>
        {
            entity.HasKey(e => e.CompanyId);

            entity.Property(e => e.CompanyId).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("date");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NextPaymentDate).HasColumnType("date");
            entity.Property(e => e.StartDate).HasColumnType("date");

            entity.HasOne(d => d.Company).WithOne(p => p.CompanyPackageDetail)
                .HasForeignKey<CompanyPackageDetail>(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyPackageDetails_Company");

            entity.HasOne(d => d.Package).WithMany(p => p.CompanyPackageDetails)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageUsers_Package");
        });

        modelBuilder.Entity<CompanyPostedLink>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(300);

            entity.HasOne(d => d.Company).WithMany(p => p.CompanyPostedLinks)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyPostedLinks_Company");
        });

        modelBuilder.Entity<CompanySlider>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Summary)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Url).HasMaxLength(300);

            entity.HasOne(d => d.Company).WithMany(p => p.CompanySliders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanySliders_Company");
        });

        modelBuilder.Entity<CompanySpecial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CompanySpecials_1");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.CompanySpecials)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanySpecials_Company");

            entity.HasOne(d => d.Product).WithMany(p => p.CompanySpecials)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanySpecials_Product");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasIndex(e => e.Iso, "uc_Countries_Iso").IsUnique();

            entity.Property(e => e.Iso)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Iso3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.ToTable("Customer");

            entity.Property(e => e.AlphaCode).HasMaxLength(50);
            entity.Property(e => e.ContactName).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.Email).HasMaxLength(200);
            entity.Property(e => e.Fax).HasMaxLength(20);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Mtdsales).HasColumnName("MTDSales");
            entity.Property(e => e.PermittedDays).HasMaxLength(15);
            entity.Property(e => e.Phone1).HasMaxLength(20);
            entity.Property(e => e.Phone2).HasMaxLength(20);
            entity.Property(e => e.PriceCode).HasMaxLength(100);
            entity.Property(e => e.PriceLevel).HasMaxLength(50);
            entity.Property(e => e.RegistrationNo).HasMaxLength(20);
            entity.Property(e => e.SalesmanCode).HasMaxLength(100);
            entity.Property(e => e.StandardDeliveryDays).HasMaxLength(10);
            entity.Property(e => e.Ytdsales).HasColumnName("YTDSales");

            entity.HasOne(d => d.Company).WithMany(p => p.Customers)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customer_Company");

            entity.HasMany(d => d.Addresses).WithMany(p => p.Customers)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerAddress",
                    r => r.HasOne<Address>().WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerAddress_Address"),
                    l => l.HasOne<Customer>().WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerAddress_Customer"),
                    j =>
                    {
                        j.HasKey("CustomerId", "AddressId");
                        j.ToTable("CustomerAddress");
                    });

            entity.HasMany(d => d.Categories).WithMany(p => p.Customers)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerSpecialCategory",
                    r => r.HasOne<MainCategory>().WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerSpecialCategory_MainCategories"),
                    l => l.HasOne<Customer>().WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerSpecialCategory_Customer"),
                    j =>
                    {
                        j.HasKey("CustomerId", "CategoryId");
                        j.ToTable("CustomerSpecialCategory");
                    });

            entity.HasMany(d => d.ChildCustomers).WithMany(p => p.ParentCustomers)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerParentChild",
                    r => r.HasOne<Customer>().WithMany()
                        .HasForeignKey("ChildCustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerParentChild_Customer1"),
                    l => l.HasOne<Customer>().WithMany()
                        .HasForeignKey("ParentCustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerParentChild_Customer"),
                    j =>
                    {
                        j.HasKey("ParentCustomerId", "ChildCustomerId");
                        j.ToTable("CustomerParentChild");
                    });

            entity.HasMany(d => d.DeliveryRuns).WithMany(p => p.Customers)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerDeliveryRun",
                    r => r.HasOne<DeliveryRun>().WithMany()
                        .HasForeignKey("DeliveryRunId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerDeliveryRun_DeliveryRuns"),
                    l => l.HasOne<Customer>().WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerDeliveryRun_Customer"),
                    j =>
                    {
                        j.HasKey("CustomerId", "DeliveryRunId");
                        j.ToTable("CustomerDeliveryRun");
                    });

            entity.HasMany(d => d.ParentCustomers).WithMany(p => p.ChildCustomers)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerParentChild",
                    r => r.HasOne<Customer>().WithMany()
                        .HasForeignKey("ParentCustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerParentChild_Customer"),
                    l => l.HasOne<Customer>().WithMany()
                        .HasForeignKey("ChildCustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerParentChild_Customer1"),
                    j =>
                    {
                        j.HasKey("ParentCustomerId", "ChildCustomerId");
                        j.ToTable("CustomerParentChild");
                    });
        });

        modelBuilder.Entity<CustomerImport>(entity =>
        {
            entity.ToTable("CustomerImport");

            entity.Property(e => e.AlphaCode).HasMaxLength(255);
            entity.Property(e => e.BalanceTotal).HasMaxLength(255);
            entity.Property(e => e.ContactName).HasMaxLength(255);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreditLimit).HasMaxLength(255);
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.CustomerName).HasMaxLength(255);
            entity.Property(e => e.Day120PlusBalance).HasMaxLength(255);
            entity.Property(e => e.Day30Balance).HasMaxLength(255);
            entity.Property(e => e.Day60Balance).HasMaxLength(255);
            entity.Property(e => e.Day90PlusBalance).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Fax).HasMaxLength(255);
            entity.Property(e => e.IsSpecialCategory).HasMaxLength(255);
            entity.Property(e => e.IsSuspended).HasMaxLength(255);
            entity.Property(e => e.Mtdsales)
                .HasMaxLength(255)
                .HasColumnName("MTDSales");
            entity.Property(e => e.Phone1).HasMaxLength(255);
            entity.Property(e => e.Phone2).HasMaxLength(255);
            entity.Property(e => e.PreviousMonthSales).HasMaxLength(255);
            entity.Property(e => e.PriceCode).HasMaxLength(255);
            entity.Property(e => e.PriceLevel).HasMaxLength(255);
            entity.Property(e => e.StandardDeliveryDays).HasMaxLength(255);
            entity.Property(e => e.TotalAmountDue).HasMaxLength(255);
            entity.Property(e => e.TotalAmountOwed).HasMaxLength(255);
            entity.Property(e => e.Ytdsales)
                .HasMaxLength(255)
                .HasColumnName("YTDSales");
        });

        modelBuilder.Entity<CustomerUserFeaturesMaster>(entity =>
        {
            entity.ToTable("CustomerUserFeaturesMaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.CustomerUserFeaturesMasters)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CustomerUserFeaturesMaster_User");
        });

        modelBuilder.Entity<DeliveryCutoffType>(entity =>
        {
            entity.ToTable("DeliveryCutoffType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<DeliveryDateCutoff>(entity =>
        {
            entity.ToTable("DeliveryDateCutoff");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CutoffDate).HasColumnType("date");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PermittedDeliveryDays).HasMaxLength(100);

            entity.HasOne(d => d.Company).WithMany(p => p.DeliveryDateCutoffs)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeliveryDateCutoff_Company");

            entity.HasOne(d => d.CutoffType).WithMany(p => p.DeliveryDateCutoffs)
                .HasForeignKey(d => d.CutoffTypeId)
                .HasConstraintName("FK_DeliveryDateCutoff_DeliveryCutoffType");
        });

        modelBuilder.Entity<DeliveryRun>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DaysOfWeek).HasMaxLength(15);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RunNo)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Company).WithMany(p => p.DeliveryRuns)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeliveryRuns_Company");
        });

        modelBuilder.Entity<Discount>(entity =>
        {
            entity.ToTable("Discount");

            entity.Property(e => e.CouponCode).HasMaxLength(20);
            entity.Property(e => e.CreatedOn).HasColumnType("date");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.MaxDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinCartValue).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.Discounts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Discount_Company");

            entity.HasOne(d => d.LimitationType).WithMany(p => p.Discounts)
                .HasForeignKey(d => d.LimitationTypeId)
                .HasConstraintName("FK_Discount_DiscountLimitationType");

            entity.HasOne(d => d.Type).WithMany(p => p.Discounts)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Discount_DiscountType");

            entity.HasMany(d => d.Customers).WithMany(p => p.Discounts)
                .UsingEntity<Dictionary<string, object>>(
                    "DiscountedCustomer",
                    r => r.HasOne<Customer>().WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DiscountedCustomers_Customer"),
                    l => l.HasOne<Discount>().WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DiscountedCustomers_Discount"),
                    j =>
                    {
                        j.HasKey("DiscountId", "CustomerId");
                        j.ToTable("DiscountedCustomers");
                    });

            entity.HasMany(d => d.Products).WithMany(p => p.Discounts)
                .UsingEntity<Dictionary<string, object>>(
                    "DiscountedProduct",
                    r => r.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DiscountedProducts_Product"),
                    l => l.HasOne<Discount>().WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DiscountedProducts_Discount"),
                    j =>
                    {
                        j.HasKey("DiscountId", "ProductId");
                        j.ToTable("DiscountedProducts");
                    });
        });

        modelBuilder.Entity<DiscountLimitationType>(entity =>
        {
            entity.ToTable("DiscountLimitationType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<DiscountType>(entity =>
        {
            entity.ToTable("DiscountType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<FavoriteList>(entity =>
        {
            entity.ToTable("FavoriteList");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Customer).WithMany(p => p.FavoriteLists)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FavoriteList_Customer");

            entity.HasOne(d => d.Type).WithMany(p => p.FavoriteLists)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FavoriteList_FavoriteListType");
        });

        modelBuilder.Entity<FavoriteListItem>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.List).WithMany(p => p.FavoriteListItems)
                .HasForeignKey(d => d.ListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FavoriteListItems_FavoriteList");

            entity.HasOne(d => d.Product).WithMany(p => p.FavoriteListItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FavoriteListItems_Product");
        });

        modelBuilder.Entity<FavoriteListType>(entity =>
        {
            entity.ToTable("FavoriteListType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<FeatureDescription>(entity =>
        {
            entity.ToTable("FeatureDescription");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Filter>(entity =>
        {
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Company).WithMany(p => p.Filters)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Filters_Company");
        });

        modelBuilder.Entity<GlobalTimeZone>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TimeZones");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DaylightEnd).HasColumnType("datetime");
            entity.Property(e => e.DaylightName).HasMaxLength(128);
            entity.Property(e => e.DaylightStart).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.Zid)
                .HasMaxLength(256)
                .HasColumnName("ZID");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Company).WithMany(p => p.Groups)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Groups_Company");

            entity.HasOne(d => d.GroupScope).WithMany(p => p.Groups)
                .HasForeignKey(d => d.GroupScopeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Groups_GroupScope");

            entity.HasOne(d => d.GroupType).WithMany(p => p.Groups)
                .HasForeignKey(d => d.GroupTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Groups_GroupType");
        });

        modelBuilder.Entity<GroupDetail>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.ReferenceId });

            entity.HasOne(d => d.Group).WithMany(p => p.GroupDetails)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GroupDetails_Groups");
        });

        modelBuilder.Entity<GroupScope>(entity =>
        {
            entity.ToTable("GroupScope");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.ScopeDesc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<GroupType>(entity =>
        {
            entity.ToTable("GroupType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ImportLog>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ImportType).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Mapping).WithMany(p => p.ImportLogs)
                .HasForeignKey(d => d.MappingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImportLogs_CompanyDataImportMappings");
        });

        modelBuilder.Entity<MainCategory>(entity =>
        {
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.MainCategories)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MainCategories_Company");
        });

        modelBuilder.Entity<MarketingType>(entity =>
        {
            entity.ToTable("MarketingType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.MessageText).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.Messages)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Messages_Company");

            entity.HasOne(d => d.Group).WithMany(p => p.Messages)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("FK_Messages_Groups");
        });

        modelBuilder.Entity<MessageRecipient>(entity =>
        {
            entity.HasKey(e => new { e.MessageId, e.UserId });

            entity.HasOne(d => d.Message).WithMany(p => p.MessageRecipients)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MessageRecipients_Messages");

            entity.HasOne(d => d.User).WithMany(p => p.MessageRecipients)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MessageRecipients_Users");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.ToTable("Order");

            entity.Property(e => e.AppVersion).HasMaxLength(10);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("date");
            entity.Property(e => e.DeviceToken).HasMaxLength(100);
            entity.Property(e => e.DeviceType).HasMaxLength(20);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ErpInvoiceNo).HasMaxLength(50);
            entity.Property(e => e.ErpOrderNo).HasMaxLength(50);
            entity.Property(e => e.ErpReference).HasMaxLength(50);
            entity.Property(e => e.FreightCharge).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Latitude).HasMaxLength(20);
            entity.Property(e => e.Longitude).HasMaxLength(20);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NonDeliveryDayCharge).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrderNote).HasMaxLength(500);
            entity.Property(e => e.OrderTotal).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PoNumber)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TotalTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalWithTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalWithoutTax).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Address).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_Order_Address");

            entity.HasOne(d => d.Comment).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CommentId)
                .HasConstraintName("FK_Order_Comments");

            entity.HasOne(d => d.Company).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Company");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Customer");

            entity.HasOne(d => d.DeliveryRun).WithMany(p => p.Orders)
                .HasForeignKey(d => d.DeliveryRunId)
                .HasConstraintName("FK_Order_DeliveryRuns");

            entity.HasOne(d => d.Status).WithMany(p => p.Orders)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_Status");

            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Order_User");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.Property(e => e.AttributePriceAdjustment).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Cost).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PriceInclTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalWithoutTax).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Comment).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.CommentId)
                .HasConstraintName("FK_OrderItems_Comments");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItems_Order");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItems_Product");

            entity.HasOne(d => d.Unit).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderItems_UnitOfMeasurement");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.PackageId).HasName("PK_Package");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Interval).WithMany(p => p.Packages)
                .HasForeignKey(d => d.IntervalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Packages_PackageInterval");
        });

        modelBuilder.Entity<PackageFeature>(entity =>
        {
            entity.HasKey(e => e.PackageId);

            entity.Property(e => e.PackageId).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Package).WithOne(p => p.PackageFeature)
                .HasForeignKey<PackageFeature>(d => d.PackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageFeatures_Packages");
        });

        modelBuilder.Entity<PackageInterval>(entity =>
        {
            entity.ToTable("PackageInterval");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PaymentProcessor>(entity =>
        {
            entity.HasKey(e => e.TypeId);

            entity.ToTable("PaymentProcessor");

            entity.Property(e => e.TypeId).ValueGeneratedOnAdd();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PaymentTransaction>(entity =>
        {
            entity.ToTable("PaymentTransaction");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ConfirmationId).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SubscriptionId).HasMaxLength(100);

            entity.HasOne(d => d.Company).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentTransaction_Company");

            entity.HasOne(d => d.Status).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.StatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentTransaction_Status");

            entity.HasOne(d => d.Type).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("FK_PaymentTransaction_PaymentProcessor");
        });

        modelBuilder.Entity<PredefinedProductAttributeValue>(entity =>
        {
            entity.ToTable("PredefinedProductAttributeValue");

            entity.Property(e => e.Cost).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PriceAdjustment).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WeightAdjustment).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Attribute).WithMany(p => p.PredefinedProductAttributeValues)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PredefinedProductAttributeValue_ProductAttribute");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.ToTable("Product");

            entity.Property(e => e.Barcode).HasMaxLength(50);
            entity.Property(e => e.BrandName).HasMaxLength(100);
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DiscountPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MetaKeywords).HasMaxLength(500);
            entity.Property(e => e.MetaTitle).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Price1).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Price2).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Price3).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Price4).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Price5).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SearchText).HasMaxLength(1000);
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("SKU");
            entity.Property(e => e.StandardCost).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SupplierName).HasMaxLength(100);

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Product_SubCategories");

            entity.HasOne(d => d.Company).WithMany(p => p.Products)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Product_Company");

            entity.HasOne(d => d.Filter).WithMany(p => p.Products)
                .HasForeignKey(d => d.FilterId)
                .HasConstraintName("FK_Product_Filters");

            entity.HasMany(d => d.Products).WithMany(p => p.SuggestiveProducts)
                .UsingEntity<Dictionary<string, object>>(
                    "SuggestiveProduct",
                    r => r.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SuggestiveProducts_Product"),
                    l => l.HasOne<Product>().WithMany()
                        .HasForeignKey("SuggestiveProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SuggestiveProducts_Product1"),
                    j =>
                    {
                        j.HasKey("ProductId", "SuggestiveProductId");
                        j.ToTable("SuggestiveProducts");
                    });

            entity.HasMany(d => d.SuggestiveProducts).WithMany(p => p.Products)
                .UsingEntity<Dictionary<string, object>>(
                    "SuggestiveProduct",
                    r => r.HasOne<Product>().WithMany()
                        .HasForeignKey("SuggestiveProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SuggestiveProducts_Product1"),
                    l => l.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SuggestiveProducts_Product"),
                    j =>
                    {
                        j.HasKey("ProductId", "SuggestiveProductId");
                        j.ToTable("SuggestiveProducts");
                    });

            entity.HasMany(d => d.Warehouses).WithMany(p => p.Products)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductWarehouse",
                    r => r.HasOne<Warehouse>().WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductWarehouse_Warehouse"),
                    l => l.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductWarehouse_Product"),
                    j =>
                    {
                        j.HasKey("ProductId", "WarehouseId");
                        j.ToTable("ProductWarehouse");
                    });
        });

        modelBuilder.Entity<ProductAttribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ProductAttributes");

            entity.ToTable("ProductAttribute");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Company).WithMany(p => p.ProductAttributes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductAttribute_Company");
        });

        modelBuilder.Entity<ProductAttributeMapping>(entity =>
        {
            entity.ToTable("ProductAttributeMapping");

            entity.Property(e => e.Placeholder).HasMaxLength(100);

            entity.HasOne(d => d.Attribute).WithMany(p => p.ProductAttributeMappings)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductAttributeMapping_ProductAttribute");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductAttributeMappings)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductAttributeMapping_Product");
        });

        modelBuilder.Entity<ProductAttributeValue>(entity =>
        {
            entity.ToTable("ProductAttributeValue");

            entity.Property(e => e.ColorRgb)
                .HasMaxLength(30)
                .HasColumnName("ColorRGB");
            entity.Property(e => e.CostPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PriceAdjustment).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Value).HasMaxLength(50);
            entity.Property(e => e.WeightAdjustment).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.ProductMapping).WithMany(p => p.ProductAttributeValues)
                .HasForeignKey(d => d.ProductMappingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductAttributeValue_ProductAttributeMapping");

            entity.HasMany(d => d.OrderItems).WithMany(p => p.AttributeValues)
                .UsingEntity<Dictionary<string, object>>(
                    "OrderItemAttribute",
                    r => r.HasOne<OrderItem>().WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_OrderItemAttributes_OrderItems1"),
                    l => l.HasOne<ProductAttributeValue>().WithMany()
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_OrderItemAttributes_ProductAttributeValue1"),
                    j =>
                    {
                        j.HasKey("AttributeValueId", "OrderItemId");
                        j.ToTable("OrderItemAttributes");
                    });

            entity.HasMany(d => d.TempCartItems).WithMany(p => p.AttributeValues)
                .UsingEntity<Dictionary<string, object>>(
                    "TempCartItemAttribute",
                    r => r.HasOne<TempCartItem>().WithMany()
                        .HasForeignKey("TempCartItemId")
                        .HasConstraintName("FK_TempCartItemAttributes_TempCartItems"),
                    l => l.HasOne<ProductAttributeValue>().WithMany()
                        .HasForeignKey("AttributeValueId")
                        .HasConstraintName("FK_TempCartItemAttributes_ProductAttributeValue"),
                    j =>
                    {
                        j.HasKey("AttributeValueId", "TempCartItemId");
                        j.ToTable("TempCartItemAttributes");
                    });
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.Property(e => e.ImageName)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Product).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductImages_Product");
        });

        modelBuilder.Entity<ProductImport>(entity =>
        {
            entity.ToTable("ProductImport");

            entity.Property(e => e.Barcode).HasMaxLength(255);
            entity.Property(e => e.BrandName).HasMaxLength(255);
            entity.Property(e => e.CategoryName).HasMaxLength(255);
            entity.Property(e => e.Code).HasMaxLength(255);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.FilterName).HasMaxLength(255);
            entity.Property(e => e.IsBackSoon).HasMaxLength(255);
            entity.Property(e => e.IsBuyIn).HasMaxLength(255);
            entity.Property(e => e.IsDonationItem).HasMaxLength(255);
            entity.Property(e => e.IsNew).HasMaxLength(255);
            entity.Property(e => e.IsOnSale).HasMaxLength(255);
            entity.Property(e => e.IsSellBelowCost).HasMaxLength(255);
            entity.Property(e => e.MainCategoryName).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.Price5).HasMaxLength(255);
            entity.Property(e => e.ShortDescription).HasMaxLength(255);
            entity.Property(e => e.StandardCost).HasMaxLength(255);
            entity.Property(e => e.SupplierName).HasMaxLength(255);
            entity.Property(e => e.Unit1).HasMaxLength(50);
            entity.Property(e => e.Unit2).HasMaxLength(50);
            entity.Property(e => e.Unit3).HasMaxLength(50);
        });

        modelBuilder.Entity<ProductInventory>(entity =>
        {
            entity.ToTable("ProductInventory");

            entity.Property(e => e.OrderExpectedDate).HasColumnType("date");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductInventories)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductInventory_Product");

            entity.HasOne(d => d.Unit).WithMany(p => p.ProductInventories)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_ProductInventory_UnitOfMeasurement");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.ProductInventories)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductInventory_Warehouse");
        });

        modelBuilder.Entity<ProductUnit>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.UnitId });

            entity.ToTable("ProductUnit");

            entity.Property(e => e.Weight).HasColumnType("decimal(8, 2)");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductUnits)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductUnit_Product");

            entity.HasOne(d => d.Unit).WithMany(p => p.ProductUnits)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductUnit_UnitOfMeasurement");
        });

        modelBuilder.Entity<SpecialPriceImport>(entity =>
        {
            entity.ToTable("SpecialPriceImport");

            entity.Property(e => e.CustomerName).HasMaxLength(200);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.ProductCode).HasMaxLength(200);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Unit).HasMaxLength(200);
        });

        modelBuilder.Entity<SpecialPricing>(entity =>
        {
            entity.ToTable("SpecialPricing");

            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.StartTime).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.SpecialPricings)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpecialPricing_Company");

            entity.HasOne(d => d.Customer).WithMany(p => p.SpecialPricings)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_SpecialPricing_Customer");

            entity.HasOne(d => d.Product).WithMany(p => p.SpecialPricings)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SpecialPricing_Product");

            entity.HasOne(d => d.Unit).WithMany(p => p.SpecialPricings)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SpecialPricing_UnitOfMeasurement");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__States__3214EC07743681CE");

            entity.Property(e => e.StateCode)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.StateName)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Country).WithMany(p => p.States)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_States_Countries");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.ToTable("Status");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.StatusDesc)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Type).WithMany(p => p.Statuses)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Status_StatusType");
        });

        modelBuilder.Entity<StatusType>(entity =>
        {
            entity.ToTable("StatusType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<SubCategory>(entity =>
        {
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SubCategoryName)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.MainCategory).WithMany(p => p.SubCategories)
                .HasForeignKey(d => d.MainCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubCategories_MainCategories");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.ToTable("Tag");

            entity.Property(e => e.Title).HasMaxLength(50);

            entity.HasMany(d => d.Products).WithMany(p => p.Tags)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTag",
                    r => r.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductTag_Product"),
                    l => l.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductTag_Tag"),
                    j =>
                    {
                        j.HasKey("TagId", "ProductId");
                        j.ToTable("ProductTag");
                    });
        });

        modelBuilder.Entity<TagType>(entity =>
        {
            entity.ToTable("TagType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.TypeDesc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TargetMarketing>(entity =>
        {
            entity.ToTable("TargetMarketing");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(100);

            entity.HasOne(d => d.Company).WithMany(p => p.TargetMarketings)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TargetMarketing_Company");

            entity.HasOne(d => d.Customer).WithMany(p => p.TargetMarketings)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_TargetMarketing_Customer");

            entity.HasOne(d => d.Group).WithMany(p => p.TargetMarketings)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("FK_TargetMarketing_Groups");

            entity.HasOne(d => d.MarketingType).WithMany(p => p.TargetMarketings)
                .HasForeignKey(d => d.MarketingTypeId)
                .HasConstraintName("FK_TargetMarketing_MarketingType");

            entity.HasMany(d => d.Products).WithMany(p => p.Marketings)
                .UsingEntity<Dictionary<string, object>>(
                    "MarketingItem",
                    r => r.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MarketingItems_Product"),
                    l => l.HasOne<TargetMarketing>().WithMany()
                        .HasForeignKey("MarketingId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MarketingItems_TargetMarketing"),
                    j =>
                    {
                        j.HasKey("MarketingId", "ProductId");
                        j.ToTable("MarketingItems");
                    });
        });

        modelBuilder.Entity<TempCart>(entity =>
        {
            entity.ToTable("TempCart");

            entity.Property(e => e.AppVersion).HasMaxLength(10);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeviceToken).HasMaxLength(100);
            entity.Property(e => e.DeviceType).HasMaxLength(20);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Address).WithMany(p => p.TempCarts)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_TempCart_Address");

            entity.HasOne(d => d.Comment).WithMany(p => p.TempCarts)
                .HasForeignKey(d => d.CommentId)
                .HasConstraintName("FK_TempCart_Comments");

            entity.HasOne(d => d.Company).WithMany(p => p.TempCarts)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TempCart_Company");

            entity.HasOne(d => d.Customer).WithMany(p => p.TempCarts)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TempCart_Customer");

            entity.HasOne(d => d.DeliveryRun).WithMany(p => p.TempCarts)
                .HasForeignKey(d => d.DeliveryRunId)
                .HasConstraintName("FK_TempCart_DeliveryRuns");

            entity.HasOne(d => d.User).WithMany(p => p.TempCarts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TempCart_User");
        });

        modelBuilder.Entity<TempCartItem>(entity =>
        {
            entity.Property(e => e.AttributePriceAdjustment).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Comment).WithMany(p => p.TempCartItems)
                .HasForeignKey(d => d.CommentId)
                .HasConstraintName("FK_TempCartItems_Comments");

            entity.HasOne(d => d.Product).WithMany(p => p.TempCartItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TempCartItems_Product");

            entity.HasOne(d => d.TempCart).WithMany(p => p.TempCartItems)
                .HasForeignKey(d => d.TempCartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TempCartItems_TempCart");

            entity.HasOne(d => d.Unit).WithMany(p => p.TempCartItems)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TempCartItems_UnitOfMeasurement");
        });

        modelBuilder.Entity<UnitOfMeasurement>(entity =>
        {
            entity.HasKey(e => e.UnitId);

            entity.ToTable("UnitOfMeasurement");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Company).WithMany(p => p.UnitOfMeasurements)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnitOfMeasurement_Company");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_User");

            entity.ToTable(tb => tb.HasTrigger("InsertCustomerUserFeatures"));

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone).HasMaxLength(15);
            entity.Property(e => e.ResetCode).HasMaxLength(100);
            entity.Property(e => e.UserName).HasMaxLength(100);
            entity.Property(e => e.VerificationCode).HasMaxLength(100);

            entity.HasOne(d => d.Company).WithMany(p => p.Users)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_Users_Company");

            entity.HasOne(d => d.Customer).WithMany(p => p.Users)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_User_Customer");

            entity.HasOne(d => d.UserType).WithMany(p => p.Users)
                .HasForeignKey(d => d.UserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_UserType");

            entity.HasMany(d => d.Addresses).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UserAddress",
                    r => r.HasOne<Address>().WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserAddress_Address"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserAddress_User"),
                    j =>
                    {
                        j.HasKey("UserId", "AddressId");
                        j.ToTable("UserAddress");
                    });
        });

        modelBuilder.Entity<UserDeviceLocationAndToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UserDeviceLocationAndToken_1");

            entity.ToTable("UserDeviceLocationAndToken");

            entity.Property(e => e.DeviceToken).HasMaxLength(250);
            entity.Property(e => e.DeviceType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IpAddress).HasMaxLength(50);
            entity.Property(e => e.LastLogin).HasColumnType("datetime");
            entity.Property(e => e.Latitude).HasMaxLength(50);
            entity.Property(e => e.Longitude).HasMaxLength(50);

            entity.HasOne(d => d.User).WithMany(p => p.UserDeviceLocationAndTokens)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_UserDeviceLocationAndToken_Users");
        });

        modelBuilder.Entity<UserPassword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UserPassword_1");

            entity.ToTable("UserPassword");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.PasswordSalt)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.User).WithMany(p => p.UserPasswords)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_UserPassword_Users");
        });

        modelBuilder.Entity<UserSalesrepCode>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.SalesrepCode });

            entity.Property(e => e.SalesrepCode).HasMaxLength(20);

            entity.HasOne(d => d.User).WithMany(p => p.UserSalesrepCodes)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserSalesrepCodes_Users");
        });

        modelBuilder.Entity<UserType>(entity =>
        {
            entity.ToTable("UserType");

            entity.Property(e => e.UserTypeId).ValueGeneratedOnAdd();
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.ToTable("Warehouse");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Address).WithMany(p => p.Warehouses)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_Warehouse_Address");

            entity.HasMany(d => d.Customers).WithMany(p => p.Warehouses)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerWarehouse",
                    r => r.HasOne<Customer>().WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerWarehouse_Customer"),
                    l => l.HasOne<Warehouse>().WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerWarehouse_Warehouse"),
                    j =>
                    {
                        j.HasKey("WarehouseId", "CustomerId");
                        j.ToTable("CustomerWarehouse");
                    });
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}