
<EditForm Model="model" OnValidSubmit="UpdatePassword">
    <DataAnnotationsValidator />
    @if (CheckExisting ?? false)
    {
        <div class="mb-3">
            <label class="mb-2 text-muted">Old Password</label>
            <RadzenPassword @bind-Value="@model.OldPassword" class="form-control" />
        </div>
    }
    <div class="mb-3">
        <label class="mb-2 text-muted">Password</label>
        <RadzenPassword @bind-Value="@model.Password" class="form-control" />
        <ValidationMessage For="() => model.Password" />
    </div>
    <div class="mb-3">
        <label class="mb-2 text-muted">Confirm Password</label>
        <RadzenPassword @bind-Value="@model.ConfirmPassword" class="form-control" />
        <ValidationMessage For="() => model.ConfirmPassword" />
    </div>
    <div class="d-flex align-items-center">
        <RadzenButton Text="Reset Password" ButtonStyle="ButtonStyle.Secondary" ButtonType="ButtonType.Submit" class="ms-auto" />
    </div>
</EditForm>

@code {

    [Parameter]
    public long UserId { get; set; }

    [Parameter]
    public bool? CheckExisting { get; set; } = false;

    [Parameter]
    public EventCallback<BaseResponseBO> OnSubmit { get; set; }

    CustomerUserResetPassword model = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task UpdatePassword()
    {
        model.UserId = UserId;
        model.CheckExisting = CheckExisting;
        var res = await _http.PostRequest<BaseResponseBO>("/Customer/UpdateUserPassword", model);
        if (res.IsSuccess)
        {
            model = new();
            if (CheckExisting == false)
            {
                _dialog.Close(res);
            }
        }
        else
        {
            Console.WriteLine($"Error: {res.Message}");
        }

        await OnSubmit.InvokeAsync(res);
        await InvokeAsync(StateHasChanged);
    }
}
