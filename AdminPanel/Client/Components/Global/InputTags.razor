@using System
@using System.Collections.Generic
@using System.Linq
@using System.Text.RegularExpressions

<style>
    .search-Ctr{
        position: absolute !important;
        z-index: 10;
        background: white;
    }

    div.search-result:hover{
        cursor:pointer;
        background-color: #3ba5fc;
        color:white;
    }
</style>

<div class="suggestion-container">
    <div id="@($"{Id}_tagsinput")" class="@(!(AllowAdd ?? false) ? "tagsinput border border-0 p-0" : "tagsinput")">

        @if (Tags != null && Tags.Any())
        {
            @foreach (var tag in Tags)
            {
                <span class="tag">
                    <span class="tag-text">@tag</span>
                    <span class="tag-remove" @onclick="() => DeleteTag(tag)" />
                </span>
            }
        }

        @if (AllowAdd ?? false)
        {
            <div id="@($"{Id}_addTag")">
                <div class="@(IsContainSpecialCharacter ? "tag-tooltip" : string.Empty)">
                    <input id="@($"{Id}_tag")"
                           class="tag-input"
                           placeholder=@Placeholder
                           autocomplete="off"
                    @bind-value="Value"
                    @onkeyup="AddTags" 
                    @oninput="SearchTags"/>

                    @if (IsContainSpecialCharacter)
                    {
                        <div class="error-right d-inline-flex p-2">
                            <i class="oi oi-warning text-warning p-1"></i>
                            <p class="text-left m-0 p-1">Special characters not allowed.</p>
                            <i></i>
                        </div>
                    }
                </div>
            </div>
            
        }
    </div>
    @if (ShowSearch ?? false && showSearchResults)
    {
        <div class="border w-100 search-Ctr">
            @foreach (var tag in filteredTags)
            {
                <div class="search-result p-1" @onclick="() => SelectTag(tag)">@tag</div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback<List<string>> OnInputChange { get; set; }

    [Parameter]
    public List<string> Existing { get; set; }

    [Parameter]
    public bool AddDefault { get; set; } = true;

    [Parameter]
    public string? Placeholder { get; set; } = "Add Code";

    [Parameter]
    public bool? AllowAdd { get; set; } = true;

    [Parameter]
    public bool? ShowSearch { get; set; } = true;

    [Parameter]
    public List<string> AllTags { get; set; }

    private Guid Id => Guid.NewGuid();
    protected string Value { get; set; }
    protected bool MenuVisibility { get; set; }
    protected bool IsContainSpecialCharacter { get; set; }
    protected List<string> Tags { get; set; } = new List<string>();

    private List<string>? filteredTags = new List<string>();
    private string currentTag;
    bool showSearchResults = false;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Existing != null && Existing.Count > 0)
        {
            Tags = Existing;
        }

        if (AddDefault)
        {
            Tags.Add("Default");
        }
    }

    protected async void AddTags(KeyboardEventArgs eventArgs)
    {
        IsContainSpecialCharacter = false;

        if (!String.IsNullOrEmpty(Value))
        {
            if (eventArgs.Key.Equals("Enter"))
            {
                await AddTag(Value);
            }
        }
    }

    async Task AddTag(string value)
    {
        var regex = new Regex(@"[^a-zA-Z0-9\s]");

        if (!regex.IsMatch(value))
        {
            if (!Tags.Exists(t => t.Equals(value, StringComparison.CurrentCultureIgnoreCase)) && !string.IsNullOrEmpty(value))
            {
                Tags.Add(value);
            }

            Value = string.Empty;
            await OnInputChange.InvokeAsync(Tags);
        }
        else
        {
            IsContainSpecialCharacter = true;
        }
    }

    protected async void DeleteTag(string value)
    {
        if (String.IsNullOrEmpty(value)) return;
        if (value == "Default" && Tags.Count == 1 && AddDefault)
        {
            return;
        }

        if (Tags.Count == 1 && AddDefault)
            return;

        var tag = Tags.FirstOrDefault(t => t == value);
        if (tag == null) return;

        Tags.Remove(tag);
        await OnInputChange.InvokeAsync(Tags);
    }

    public async Task Refresh()
    {
        if (Existing != null && Existing.Count > 0)
        {
            Tags = Existing;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectTag(string tag)
    {
        await AddTag(tag);
        currentTag = "";
        showSearchResults = false;
        await Task.Delay(100);
        filteredTags.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private void SearchTags(ChangeEventArgs e)
    {
        currentTag = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(currentTag))
        {
            showSearchResults = false;
            filteredTags.Clear();
        }
        else
        {
            filteredTags = AllTags
                .Where(tag => tag.Contains(currentTag, StringComparison.OrdinalIgnoreCase))
                .ToList();
            showSearchResults = true;
        }
    }
}