@page "/VerifyAccount/{Token}"
@inject CustomAuthenticationStateProvider _authProvider

<div class="card-body p-3 py-3">
    <h1 class="fs-4 card-title fw-bold mb-4 text-center"> Account Verification</h1>
    <p>
        @message
    </p>
    @if (showResendForm)
    {
        <EditForm autocomplete="off" Model="@model" OnValidSubmit="@ResendVerificationLink">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="mb-2 text-muted" for="email">E-Mail</label>
                <RadzenTextBox @bind-Value="@model.Email" class="form-control" />
                <ValidationMessage For="() => model.Email" />
            </div>
            <div class="d-flex align-items-center">
                <RadzenButton Text="Resend Code" ButtonStyle="ButtonStyle.Secondary" ButtonType="ButtonType.Submit" class="ms-auto" />
            </div>
        </EditForm>
    }
    else
    {
        <div class="card-footer py-3 border-0">
            <div class="text-center">
                <a href="/Login" class="text-dark">Click here</a> to login to your acount.
            </div>
        </div>
    }
</div>

<Loading @ref="@loading" />

@code {
    [Parameter]
    public string Token { get; set; }
    Loading? loading;
    string? message;
    bool showResendForm = false;
    ResendLinkBO model = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Task.Delay(100);
        await ValidateAccount();
    }

    async Task ValidateAccount()
    {
        loading.ShowLoading();
        var response = await _authProvider.ValidateAccount(Token);
        if (!response.IsSuccess)
        {
            showResendForm = true;
        }
        message = response.Message;

        loading.StopLoading();
    }

    async Task ResendVerificationLink()
    {
        loading.ShowLoading();
        var response = await _authProvider.ResendVerificationToken(model.Email);
        if (response.IsSuccess)
        {
            showResendForm = false;
        }
        message = response.Message;
        loading.StopLoading();
    }
}
