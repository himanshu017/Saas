@page "/ForgotPassword"
@inject CustomAuthenticationStateProvider _authProvider

<div class="card-body p-3 py-3">
    <h1 class="fs-4 card-title fw-bold mb-4">Forgot Password</h1>
    <p>
        @message
    </p>
    @if (showForm)
    {
        <EditForm autocomplete="off" Model="@model" OnValidSubmit="@ForgotPasswordRequest">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="mb-2 text-muted" for="email">E-Mail</label>
                <RadzenTextBox @bind-Value="@model.Email" class="form-control" />
                <ValidationMessage For="() => model.Email" />
            </div>
            <div class="d-flex align-items-center">
                <RadzenButton Text="Send Link" ButtonStyle="ButtonStyle.Secondary" ButtonType="ButtonType.Submit" class="ms-auto" />
            </div>
        </EditForm>
    }
</div>
<div class="card-footer py-3 border-0">
    <div class="text-center">
        Remember your password? <a href="/Login" class="text-dark">Login</a>
    </div>
</div>
<Loading @ref="@loading" />

@code {
    [Parameter]
    public string Token { get; set; }
    Loading loading;
    string message;
    bool showForm = true;
    ResendLinkBO model = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Task.Delay(100);
    }

    async Task ForgotPasswordRequest()
    {
        loading.ShowLoading();
        var response = await _authProvider.ForgotPassword(model.Email);
        if (response.IsSuccess)
        {
            showForm = false;
        }
        message = response.Message;
        loading.StopLoading();
    }
}
