@page "/ResetPassword/{Token}"
@inject CustomAuthenticationStateProvider _authProvider


<div class="card-body p-3 py-3">
    <h1 class="fs-4 card-title fw-bold mb-4">Reset Password</h1>
    <p>
        @response.Message
    </p>
    @if (resetForm)
    {
        <EditForm autocomplete="off" Model="@model" OnValidSubmit="@PasswordReset">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="mb-2 text-muted">Password</label>
                <RadzenPassword @bind-Value="@model.Password" class="form-control" />
                <ValidationMessage For="() => model.Password" />
            </div>
            <div class="mb-3">
                <label class="mb-2 text-muted">Confirm Password</label>
                <RadzenPassword @bind-Value="@model.ConfirmPassword" class="form-control" />
                <ValidationMessage For="() => model.ConfirmPassword" />
            </div>
            <div class="d-flex align-items-center">
                @*<div class="form-check">
                    <input type="checkbox" name="logout_devices" id="logout" class="form-check-input">
                    <label for="logout" class="form-check-label">Logout all devices</label>
                    </div>*@
                <RadzenButton Text="Reset Password" ButtonStyle="ButtonStyle.Secondary" ButtonType="ButtonType.Submit" class="ms-auto" />
            </div>
        </EditForm>
    }
    else
    {
        @if (response.IsSuccess)
        {
            <p><a href="/Login"> Click here </a> to login using your new password.</p>
        }
        else if(!response.IsRecent)
        {
            <p><a href="/ForgotPassword"> Click here </a> to generate a new reset token.</p>
        }
    }
</div>

<Loading @ref="loading" />

@code {
    [Parameter]
    public string Token { get; set; }

    ResetPasswordBO model = new();
    Loading loading;
    bool resetForm = true;
    ResetPasswordResponse response = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task PasswordReset()
    {
        model.ResetToken = Token;

        loading.ShowLoading();

        response = await _authProvider.ResetPassword(model);
        resetForm = false;

        if (response.IsRecent)
        {
            resetForm = true;
            model = new();
        }

        loading.StopLoading();
    }
}
