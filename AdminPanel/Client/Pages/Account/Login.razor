@page "/Login/"
@page "/Login/{ReturnUrl}"
@inject CustomAuthenticationStateProvider _authProvider
@inject NavigationManager _navManager


<AlertMessage AlertModel="@alert" />


<div class="card-body p-5 py-3">
    <h1 class="fs-4 card-title fw-bold mb-4">Login</h1>
    <EditForm autocomplete="off" Model="@model" OnValidSubmit="@ValidateUser">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label class="mb-2 text-muted" for="email">E-Mail / Username</label>
            <RadzenTextBox @bind-Value="@model.UserName" class="form-control" />
            <ValidationMessage For="() => model.UserName" />
        </div>
        <div class="mb-3">
            <div class="mb-2 w-100">
                <label class="text-muted" for="password">Password</label>
                <a href="/ForgotPassword" class="float-end">
                    Forgot Password?
                </a>
            </div>
            <RadzenPassword @bind-Value="@model.Password" class="form-control" />
            <ValidationMessage For="() => model.Password" />
        </div>

        <div class="d-flex align-items-center">
            <div class="form-check">
                <input type="checkbox" name="remember" id="remember" class="form-check-input">
                <label for="remember" class="form-check-label">Remember Me</label>
            </div>
            <RadzenButton Text="Login" ButtonStyle="ButtonStyle.Secondary" ButtonType="ButtonType.Submit" class="ms-auto" />
        </div>
    </EditForm>
</div>
<div class="card-footer py-3 border-0">
    <div class="text-center">
       @* Don't have an account? <a href="/Register" class="text-dark">Create One</a>*@
    </div>
</div>
<Loading @ref="@loading" />

@code {
    LoginBO model = new LoginBO() { DeviceType ="Admin", DeviceToken = "Code pending!!"};
    Loading? loading;
    AlertBO? alert;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; } 
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        alert = new AlertBO();
    }

    async Task ValidateUser()
    {
        try
        {
            loading!.ShowLoading();

            var response = await _authProvider.Login(model);

            if (response.IsSuccess)
            {
                if (response.Role == UserTypes.CompanyAdmin.ToString())
                {
                    _navManager.NavigateTo(string.IsNullOrEmpty(ReturnUrl) ? "/Dashboard" : ReturnUrl);
                }
                else
                {
                    _navManager.NavigateTo(string.IsNullOrEmpty(ReturnUrl) ? "/AdminDashboard" : ReturnUrl);
                }
            }
            else
            {
                alert!.Visible = true;
                alert.Message = response.Message;
                alert.Type = "warning";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            loading!.StopLoading();
        }
    }
}
